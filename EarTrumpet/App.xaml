<Application x:Class="EarTrumpet.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:bcl="clr-namespace:System;assembly=mscorlib"
             xmlns:ext="clr-namespace:EarTrumpet.Extensions"
             xmlns:svc="clr-namespace:EarTrumpet.Services"
             xmlns:win="clr-namespace:System.Windows;assembly=PresentationFramework"
             Startup="Application_Startup">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Views\SystemThemeColors.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <svc:ThemeService x:Key="ThemeService" />

            <ext:InvertableVisibilityConverter x:Key="visConverter" />
            <ext:OpacityConverter x:Key="opacityConverter" />

            <Thickness x:Key="PopupBorderThickness">1</Thickness>
            <bcl:Double x:Key="WindowBlurRadius">10</bcl:Double>
            <bcl:Double x:Key="WindowAndItemSize">360</bcl:Double>
            <bcl:Double x:Key="DeviceIconSize">24</bcl:Double>
            <bcl:Double x:Key="AppIconSize">24</bcl:Double>
            <win:GridLength x:Key="IconCellWidth">65</win:GridLength>
            <win:GridLength x:Key="VolumeCellWidth">63</win:GridLength>
            <bcl:Double x:Key="DeviceTitleCellHeight">44</bcl:Double>
            <bcl:Double x:Key="AppItemCellHeight">44</bcl:Double>
            <bcl:Double x:Key="DeviceItemCellHeight">54</bcl:Double>
            <bcl:Double x:Key="AppVolumeTextFontSize">18</bcl:Double>
            <bcl:Double x:Key="DeviceVolumeTextFontSize">24</bcl:Double>
            <bcl:Double x:Key="LargeWindowTextFontSize">15</bcl:Double>
            <Thickness x:Key="WindowMargin">12,0,12,0</Thickness>
            <Thickness x:Key="VolumeAppListMargin">0,6,0,6</Thickness>
            <Thickness x:Key="VolumeAppListMarginFullWindow">0,6,0,0</Thickness>
            <Thickness x:Key="DeviceOrAppIconMargin">5,0,0,0</Thickness>
            <Thickness x:Key="VolumeTextMargin">-1,0,0,0</Thickness>
            <bcl:Double x:Key="NoItemsPaneHeight">50</bcl:Double>
            <Thickness x:Key="NoItemsPaneMargin">0,8</Thickness>

            <Style x:Key="CaptionButtonStyle" TargetType="Button">
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
                <Setter Property="FontSize" Value="10" />
                <Setter Property="FontWeight" Value="ExtraLight" />
                <Setter Property="Width" Value="46" />
                <Setter Property="Height" Value="31" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource NormalWindowForeground}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                                    Margin="0,-1,0,0"
                                    Background="{TemplateBinding Background}"
                                    SnapsToDevicePixels="True">
                                <ContentPresenter Margin="2"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  RecognizesAccessKey="True" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CloseButtonStyle"
                   BasedOn="{StaticResource CaptionButtonStyle}"
                   TargetType="Button">
                <Setter Property="Margin" Value="0,1,0,0" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Foreground" Value="{DynamicResource CloseButtonForeground}" />
                        <Setter Property="Background" Value="#FFE81123" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="Windows10FocusVisualStyle">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Grid>
                                <Rectangle Stroke="Black" StrokeThickness="3" />
                                <Rectangle Stroke="White" StrokeThickness="2" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="LargeWindows10FocusVisualStyle">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Grid Margin="-4" SnapsToDevicePixels="True">
                                <Rectangle Stroke="Black" StrokeThickness="3" />
                                <Rectangle Stroke="White" StrokeThickness="2" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="Windows10ButtonStyle" TargetType="Button">
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="FontSize" Value="15" />
                <Setter Property="Padding" Value="14,0" />
                <Setter Property="Height" Value="32" />
                <Setter Property="MinWidth" Value="90" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource LargeWindows10FocusVisualStyle}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonForeground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBackground}" />
                <Setter Property="Background" Value="{DynamicResource ButtonBackground}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Padding="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <TextBlock HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Foreground="{TemplateBinding Foreground}"
                                           Text="{TemplateBinding Content}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />
                        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundHover}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderHover}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundPressed}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBackgroundPressed}" />
                    </Trigger>
                </Style.Triggers>
            </Style>


            <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Background="Transparent">
                                <Border Height="2" Background="{TemplateBinding Foreground}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="Height" Value="24" />
                <Setter Property="Width" Value="8" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border Name="Thumb"
                                    Background="{TemplateBinding Foreground}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0"
                                    CornerRadius="5" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="BaseVolumeSliderStyle" TargetType="{x:Type Slider}">
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="Minimum" Value="0" />
                <Setter Property="Maximum" Value="100" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Interval" Value="1" />
                <Setter Property="Height" Value="32" />
                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="SmallChange" Value="1" />
                <Setter Property="LargeChange" Value="10" />
                <Setter Property="IsManipulationEnabled" Value="true" />
            </Style>

            <Style x:Key="{x:Type ListView}" TargetType="ListView">
                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListView">
                            <Border Background="{TemplateBinding Background}">
                                <ItemsPresenter />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="{x:Type ListViewItem}" TargetType="ListViewItem">
                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="FocusVisualStyle" Value="{DynamicResource Windows10FocusVisualStyle}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListBoxItem">
                            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GlyphTextBlockStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
            </Style>

            <Style x:Key="TextBlockStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextTrimming" Value="CharacterEllipsis" />
            </Style>

            <Style x:Key="BaseDeviceVolumeTextStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Margin" Value="{StaticResource VolumeTextMargin}" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontSize" Value="{StaticResource DeviceVolumeTextFontSize}" />

            </Style>

            <Style x:Key="BaseAppVolumeTextStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Margin" Value="{StaticResource VolumeTextMargin}" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontSize" Value="{StaticResource AppVolumeTextFontSize}" />
            </Style>

            <Style x:Key="BaseDeviceTitleTextStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontSize" Value="{StaticResource LargeWindowTextFontSize}" />
            </Style>

            <Style x:Key="BaseVirtualTitleBarBorderStyle" TargetType="{x:Type Border}">
                <Setter Property="Height" Value="{StaticResource DeviceTitleCellHeight}" />
            </Style>

            <Style x:Key="BaseVolumeControlPopupBorder" TargetType="{x:Type Border}">
                <Setter Property="BorderThickness" Value="{StaticResource PopupBorderThickness}" />
            </Style>

            <Style x:Key="BaseVirtualTitleBarTextStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Margin" Value="{StaticResource WindowMargin}" />
                <Setter Property="FontSize" Value="{StaticResource LargeWindowTextFontSize}" />
                <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <Style x:Key="BaseVirtualTitleBarButtonStyle" TargetType="Button">
                <Setter Property="Width" Value="{StaticResource DeviceTitleCellHeight}" />
                <Setter Property="Height" Value="{StaticResource DeviceTitleCellHeight}" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource Windows10FocusVisualStyle}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border Background="{TemplateBinding Background}">
                                <TextBlock HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           FontFamily="Segoe MDL2 Assets"
                                           FontSize="{TemplateBinding FontSize}"
                                           Foreground="{TemplateBinding Foreground}"
                                           Text="{TemplateBinding Tag}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DialogWindowStyle" TargetType="{x:Type Window}">
                <Setter Property="AllowsTransparency" Value="True" />
                <Setter Property="Background" Value="{DynamicResource NormalWindowBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource NormalWindowForeground}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Icon" Value="pack://application:,,,/EarTrumpet;component/Assets/Tray.ico" />
                <Setter Property="ShowInTaskbar" Value="True" />
                <Setter Property="WindowStyle" Value="None" />
                <Setter Property="WindowChrome.WindowChrome">
                    <Setter.Value>
                        <WindowChrome CaptionHeight="31" ResizeBorderThickness="4" />
                    </Setter.Value>
                </Setter>

                <Setter Property="BorderBrush" Value="{DynamicResource ActiveBorder}" />
                <Style.Triggers>
                    <Trigger Property="IsActive" Value="false">
                        <Setter Property="BorderBrush" Value="{DynamicResource InactiveWindowBorder}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="BaseAppListStyle" TargetType="{x:Type ListView}">
                <Setter Property="Margin" Value="{StaticResource VolumeAppListMargin}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListView">
                            <Border Background="{TemplateBinding Background}">
                                <ItemsPresenter />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="BaseOverlayButton" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Opacity" Value="0" />
                <Setter Property="Foreground" Value="{DynamicResource WindowForeground}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Focusable="False"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ContextMenu}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                <Setter Property="HasDropShadow" Value="True" />
                <Setter Property="FontSize" Value="12" />
                <Setter Property="FontFamily" Value="Segoe UI" />
                <Setter Property="Foreground" Value="{DynamicResource ContextMenuItemText}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Border x:Name="Border" Background="{DynamicResource ContextMenuBackground}" BorderThickness="1" BorderBrush="{DynamicResource ContextMenuBorder}">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasDropShadow" Value="true">
                                    <Setter TargetName="Border" Property="Padding" Value="2,8,2,8" />
                                    <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Height" Value="1" />
                <Setter Property="Margin" Value="8,4,8,4" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Line Stroke="{DynamicResource ContextMenuItemGlyph}" StrokeThickness="1" X2="1" Stretch="Fill" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TopLevelHeader -->
            <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
                <Border x:Name="Border">
                    <Grid>
                        <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                            <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="1" Background="{DynamicResource ContextMenuBackground}" BorderBrush="{DynamicResource ContextMenuBorder}">
                                <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewer}">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                        <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="true">
                        <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                        <Setter Property="Background" TargetName="Border" Value="{DynamicResource ContextMenuItemBackgroundHover}" />
                    </Trigger>
                    <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                        <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground"  Value="{DynamicResource ContextMenuItemTextDisabled}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- TopLevelItem -->
            <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
                <Border x:Name="Border">
                    <Grid>
                        <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsHighlighted" Value="true">
                        <Setter Property="Background" TargetName="Border" Value="{DynamicResource ContextMenuItemBackgroundHover}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource ContextMenuItemTextDisabled}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- SubmenuItem -->
            <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
                <Border x:Name="Border" BorderThickness="0" Padding="12,6,12,6">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                            <ColumnDefinition Width="13" />
                        </Grid.ColumnDefinitions>
                        <!--<ContentPresenter x:Name="Icon" Margin="0" VerticalAlignment="Center" ContentSource="Icon" />-->
                        <Border x:Name="Check" Width="14" Height="14" Visibility="Visible" Margin="0,0,12,0" BorderThickness="1">
                            <TextBlock x:Name="CheckMark" Visibility="Hidden" SnapsToDevicePixels="False" FontFamily="Segoe MDL2 Assets" FontSize="14" Text="&#xE73E;" Foreground="{DynamicResource ContextMenuItemGlyph}" />
                        </Border>
                        <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                        <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,0,2" DockPanel.Dock="Right" FontSize="10" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
                    <!--<Trigger Property="Icon" Value="{x:Null}">
                        <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                    </Trigger>-->
                    <Trigger Property="IsChecked" Value="true">
                        <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <!--<Trigger Property="IsCheckable" Value="true">
                        <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                        <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                    </Trigger>-->
                    <Trigger Property="IsHighlighted" Value="true">
                        <Setter Property="Background" TargetName="Border" Value="{DynamicResource ContextMenuItemBackgroundHover}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource ContextMenuItemTextDisabled}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
                <Border x:Name="Border" BorderThickness="0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                            <ColumnDefinition Width="13" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                        <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                        <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2" DockPanel.Dock="Right" FontSize="10" />
                        <Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{DynamicResource ContextMenuItemGlyph}" />
                        <Popup x:Name="Popup" Placement="Right" HorizontalOffset="-4" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                            <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource NormalWindowBackground}" BorderThickness="1"> 
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="Green" />
                                </Border.BorderBrush>
                                <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewer}">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="true">
                        <Setter Property="Background" TargetName="Border"  Value="{DynamicResource ContextMenuItemBackgroundHover}" />
                        <Setter Property="Foreground" Value="{DynamicResource ContextMenuItemTextHover}" />
                    </Trigger>
                    <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                        <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource ContextMenuItemTextDisabled}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- MenuItem Style -->
            <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Style.Triggers>
                    <Trigger Property="Role" Value="TopLevelHeader">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                    </Trigger>
                    <Trigger Property="Role" Value="TopLevelItem">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
                    </Trigger>
                    <Trigger Property="Role" Value="SubmenuHeader">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
                    </Trigger>
                    <Trigger Property="Role" Value="SubmenuItem">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
