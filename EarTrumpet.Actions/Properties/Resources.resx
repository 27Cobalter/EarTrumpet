<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionAdditionalText" xml:space="preserve">
    <value>and then</value>
  </data>
  <data name="ActionVerbText" xml:space="preserve">
    <value>Do</value>
  </data>
  <data name="AddActionText" xml:space="preserve">
    <value>Add action</value>
  </data>
  <data name="AddConditionText" xml:space="preserve">
    <value>Add condition</value>
  </data>
  <data name="AddonDescriptionText" xml:space="preserve">
    <value>Configure hotkeys and macros</value>
  </data>
  <data name="AddTriggerText" xml:space="preserve">
    <value>Add trigger</value>
  </data>
  <data name="AppEventTrigger_AddText" xml:space="preserve">
    <value>When an app session is (added, removed, plays sound, ...)</value>
  </data>
  <data name="AppEventTrigger_LinkText" xml:space="preserve">
    <value>{App} {Option} on {Device}</value>
  </data>
  <data name="AudioAppEventKind_Added" xml:space="preserve">
    <value>is added</value>
  </data>
  <data name="AudioAppEventKind_Muted" xml:space="preserve">
    <value>is muted</value>
  </data>
  <data name="AudioAppEventKind_NotPlayingSound" xml:space="preserve">
    <value>stops playing sound</value>
  </data>
  <data name="AudioAppEventKind_PlayingSound" xml:space="preserve">
    <value>begins playing sound</value>
  </data>
  <data name="AudioAppEventKind_Removed" xml:space="preserve">
    <value>is removed</value>
  </data>
  <data name="AudioAppEventKind_Unmuted" xml:space="preserve">
    <value>is unmuted</value>
  </data>
  <data name="AudioDeviceEventKind_Added" xml:space="preserve">
    <value>is added</value>
  </data>
  <data name="AudioDeviceEventKind_BecomingDefault" xml:space="preserve">
    <value>becomes default</value>
  </data>
  <data name="AudioDeviceEventKind_LeavingDefault" xml:space="preserve">
    <value>leaves default</value>
  </data>
  <data name="AudioDeviceEventKind_Removed" xml:space="preserve">
    <value>is removed</value>
  </data>
  <data name="BoolValue_False" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="BoolValue_True" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="ComparisonBoolKind_Is" xml:space="preserve">
    <value>is</value>
  </data>
  <data name="ComparisonBoolKind_IsNot" xml:space="preserve">
    <value>is not</value>
  </data>
  <data name="ConditionAdditionalText" xml:space="preserve">
    <value>and</value>
  </data>
  <data name="ConditionsHelpText" xml:space="preserve">
    <value>Add an optional filter condition to build more advanced actions. Filters must all be true for the Do's to be run.</value>
  </data>
  <data name="ConditionVerbText" xml:space="preserve">
    <value>Advanced Filter</value>
  </data>
  <data name="ContextMenuTrigger_AddText" xml:space="preserve">
    <value>Create a context menu item in EarTrumpet</value>
  </data>
  <data name="ContextMenuTrigger_LinkText" xml:space="preserve">
    <value>I click a context menu item in EarTrumpet</value>
  </data>
  <data name="DefaultDeviceCondition_AddText" xml:space="preserve">
    <value>If the default playback device (is, is not)</value>
  </data>
  <data name="DefaultDeviceCondition_LinkText" xml:space="preserve">
    <value>{Device} {Option} the default device</value>
  </data>
  <data name="DefaultPlaybackDeviceText" xml:space="preserve">
    <value>default playback device</value>
  </data>
  <data name="DeviceEventTrigger_AddText" xml:space="preserve">
    <value>When an audio device is (added, removed, becomes or leaves default)</value>
  </data>
  <data name="DeviceEventTrigger_LinkText" xml:space="preserve">
    <value>{Device} {Option}</value>
  </data>
  <data name="EarTrumpetEventKind_Shutdown" xml:space="preserve">
    <value>shuts down</value>
  </data>
  <data name="EarTrumpetEventKind_Startup" xml:space="preserve">
    <value>starts up</value>
  </data>
  <data name="EditActionsAndHotkeysText" xml:space="preserve">
    <value>Edit actions and hotkeys</value>
  </data>
  <data name="EditText" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EtaXmlFileText" xml:space="preserve">
    <value>EarTrumpet Actions Save File</value>
  </data>
  <data name="EventTrigger_AddText" xml:space="preserve">
    <value>When EarTrumpet is started or stopped</value>
  </data>
  <data name="EventTrigger_LinkText" xml:space="preserve">
    <value> EarTrumpet {Option}</value>
  </data>
  <data name="EveryAppText" xml:space="preserve">
    <value>Every app</value>
  </data>
  <data name="ExportHeaderText" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="ExportHelpText" xml:space="preserve">
    <value>Import your actions previously exported by EarTrumpet.</value>
  </data>
  <data name="ForegroundAppText" xml:space="preserve">
    <value>Foreground app</value>
  </data>
  <data name="HotkeyTrigger_AddText" xml:space="preserve">
    <value>When a hotkey is pressed</value>
  </data>
  <data name="HotkeyTrigger_EmptyText" xml:space="preserve">
    <value>(choose a hotkey)</value>
  </data>
  <data name="HotkeyTrigger_LinkText" xml:space="preserve">
    <value>{Hotkey} is typed</value>
  </data>
  <data name="ImportAndExportTitle" xml:space="preserve">
    <value>Import and export</value>
  </data>
  <data name="ImportHeaderText" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="ImportHelpText" xml:space="preserve">
    <value>Create a file that contains a copy of your saved actions.  This file can be imported on this or another PC later.</value>
  </data>
  <data name="MuteKind_Mute" xml:space="preserve">
    <value>Mute</value>
  </data>
  <data name="MuteKind_ToggleMute" xml:space="preserve">
    <value>Toggle mute</value>
  </data>
  <data name="MuteKind_Unmute" xml:space="preserve">
    <value>Unmute</value>
  </data>
  <data name="MyActionsText" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="NewActionText" xml:space="preserve">
    <value>New action</value>
  </data>
  <data name="OptionalText" xml:space="preserve">
    <value>(optional)</value>
  </data>
  <data name="PlaybackDeviceFormatStringText" xml:space="preserve">
    <value>Playback: {0}</value>
  </data>
  <data name="ProcessCondition_AddText" xml:space="preserve">
    <value>If a process is (running, not running)</value>
  </data>
  <data name="ProcessCondition_EmptyText" xml:space="preserve">
    <value>(enter a process name)</value>
  </data>
  <data name="ProcessCondition_LinkText" xml:space="preserve">
    <value>When {Text} {Option}</value>
  </data>
  <data name="ProcessCondition_PromptText" xml:space="preserve">
    <value>Process name (e.g. notepad)</value>
  </data>
  <data name="ProcessEventKind_Start" xml:space="preserve">
    <value>starts</value>
  </data>
  <data name="ProcessEventKind_Stop" xml:space="preserve">
    <value>stops</value>
  </data>
  <data name="ProcessStateKind_NotRunning" xml:space="preserve">
    <value>is not running</value>
  </data>
  <data name="ProcessStateKind_Running" xml:space="preserve">
    <value>is running</value>
  </data>
  <data name="ProcessTrigger_AddText" xml:space="preserve">
    <value>When a process starts or stops</value>
  </data>
  <data name="ProcessTrigger_EmptyText" xml:space="preserve">
    <value>(enter a process name)</value>
  </data>
  <data name="ProcessTrigger_LinkText" xml:space="preserve">
    <value>When {Text} {Option}</value>
  </data>
  <data name="ProcessTrigger_PromptText" xml:space="preserve">
    <value>Process name (e.g. notepad)</value>
  </data>
  <data name="RecordingDeviceFormatStringText" xml:space="preserve">
    <value>Recording: {0}</value>
  </data>
  <data name="RemoveText" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="RequiredText" xml:space="preserve">
    <value>(required)</value>
  </data>
  <data name="SetAppMuteAction_AddText" xml:space="preserve">
    <value>Mute or unmute an app</value>
  </data>
  <data name="SetAppMuteAction_LinkText" xml:space="preserve">
    <value>{Option} {App} on {Device}</value>
  </data>
  <data name="SetAppVolumeAction_AddText" xml:space="preserve">
    <value>Set an app volume</value>
  </data>
  <data name="SetAppVolumeAction_LinkText" xml:space="preserve">
    <value>{Option} volume to {Volume} for {App} on {Device}</value>
  </data>
  <data name="SetAppVolumeAction_LinkTextIncrement" xml:space="preserve">
    <value>{Option} volume by {Volume} for {App} on {Device}</value>
  </data>
  <data name="SetDefaultDeviceAction_AddText" xml:space="preserve">
    <value>Set the default playback device</value>
  </data>
  <data name="SetDefaultDeviceAction_LinkText" xml:space="preserve">
    <value>Set {Device} as playback default</value>
  </data>
  <data name="SetDeviceMuteAction_AddText" xml:space="preserve">
    <value>Mute or unmute a device</value>
  </data>
  <data name="SetDeviceMuteAction_LinkText" xml:space="preserve">
    <value>{Option} {Device}</value>
  </data>
  <data name="SetDeviceMuteAction_LinkTextToggle" xml:space="preserve">
    <value>{Option} on {Device}</value>
  </data>
  <data name="SetDeviceVolumeAction_AddText" xml:space="preserve">
    <value>Set a device volume</value>
  </data>
  <data name="SetDeviceVolumeAction_LinkText" xml:space="preserve">
    <value>{Option} volume to {Volume} for {Device}</value>
  </data>
  <data name="SetDeviceVolumeAction_LinkTextIncrement" xml:space="preserve">
    <value>{Option} volume by {Volume} for {Device}</value>
  </data>
  <data name="SetVariableAction_AddText" xml:space="preserve">
    <value>Set a local variable</value>
  </data>
  <data name="SetVariableAction_EmptyText" xml:space="preserve">
    <value>(set variable name)</value>
  </data>
  <data name="SetVariableAction_LinkText" xml:space="preserve">
    <value>Set variable {Text} to {Option}</value>
  </data>
  <data name="SetVariableAction_PromptText" xml:space="preserve">
    <value>Enter a variable name (e.g. IsInGameMode)</value>
  </data>
  <data name="SetVolumeKind_Decrement" xml:space="preserve">
    <value>Decrement</value>
  </data>
  <data name="SetVolumeKind_Increment" xml:space="preserve">
    <value>Increment</value>
  </data>
  <data name="SetVolumeKind_Set" xml:space="preserve">
    <value>Set</value>
  </data>
  <data name="TriggerAdditionalText" xml:space="preserve">
    <value>or</value>
  </data>
  <data name="TriggerVerbText" xml:space="preserve">
    <value>When</value>
  </data>
  <data name="VariableCondition_AddText" xml:space="preserve">
    <value>If a local variable is (true or false)</value>
  </data>
  <data name="VariableCondition_EmptyText" xml:space="preserve">
    <value>(enter a variable name)</value>
  </data>
  <data name="VariableCondition_LinkText" xml:space="preserve">
    <value>Variable {Text} is {Option}</value>
  </data>
  <data name="VariableCondition_PromptText" xml:space="preserve">
    <value>Enter a variable name (e.g. IsInGameMode)</value>
  </data>
  <data name="ToolbarDeleteText" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="ToolbarEditText" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="ToolbarSaveText" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="DeleteActionDialogNoText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="DeleteActionDialogText" xml:space="preserve">
    <value>Delete action?</value>
  </data>
  <data name="DeleteActionDialogTitle" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteActionDialogYesText" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="LeavingPageDialogNoText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="LeavingPageDialogText" xml:space="preserve">
    <value>Leave without saving?</value>
  </data>
  <data name="LeavingPageDialogTitle" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="LeavingPageDialogYesText" xml:space="preserve">
    <value>Leave</value>
  </data>
  <data name="RemoveActionButtonText" xml:space="preserve">
    <value>Remove this action</value>
  </data>
  <data name="RemoveActionDescriptionText" xml:space="preserve">
    <value>Removing cannot be undone</value>
  </data>
  <data name="RemoveActionHeadingText" xml:space="preserve">
    <value>Remove action</value>
  </data>
  <data name="RemoveButtonAccessibleName" xml:space="preserve">
    <value>Remove</value>
  </data>
</root>